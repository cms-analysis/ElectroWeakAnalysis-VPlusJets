/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "RooDibosonHistPdf.h" 
#include "RooWorkspace.h"

#include <math.h> 
#include "TMath.h" 

ClassImp(RooDibosonHistPdf) 

RooDibosonHistPdf::RooDibosonHistPdf() : dhist(0) 
{
}

RooDibosonHistPdf::RooDibosonHistPdf(const char *name, const char *title, 
				     RooAbsReal& _x,
				     RooAbsReal& _lZ,
				     RooAbsReal& _dkg,
				     RooAbsReal& _dg1,
				     RooDataHist& _dhist) :
   RooAbsPdf(name,title), 
   x("x","x",this,_x),
   lZ("lZ","lZ",this,_lZ),
   dkg("dkg","dkg",this,_dkg),
   dg1("dg1","dg1",this,_dg1),
   dhist(&_dhist)
{ 
} 

RooDibosonHistPdf::RooDibosonHistPdf(const RooDibosonHistPdf& other, 
                                     const char* name) :  
  RooAbsPdf(other,name), 
  x("x",this,other.x),
  lZ("lZ",this,other.lZ),
  dkg("dkg",this,other.dkg),
  dg1("dg1",this,other.dg1),
  dhist(other.dhist)
{ 
} 

double RooDibosonHistPdf::anomalousRatio() const 
{
  double lZ2(lZ*lZ), dkg2(dkg*dkg), dg12(dg1*dg1), x2(x*x);
  double lZC0(1.21938 + 182.208*lZ2),
    lZC1(-0.00182372 - 2.98963*lZ2),
    lZC2(0.00000354713 + 0.0116306*lZ2);
  double dkgC0(1.47302 + 56.0842*dkg2),
    dkgC1(0. - 0.723*dkg2),
    dkgC2(0.0000101017 + 0.00468047*dkg2);
  double dg1C0(0.87463 - 0.697297*dg12),
    dg1C1(0.000791995 + 0.0090919*dg12),
    dg1C2(0.00000180715 + 0.0000394048*dg12);

  double t_lZ(lZC0 + lZC1*x + lZC2*x2),
    t_dkg(dkgC0 + dkgC1*x + dkgC2*x2),
    t_dg1(dg1C0 + dg1C1*x + dg1C2*x2);

  if (fabs(lZ) < 5.e-4)
    t_lZ = 1.;
  if (fabs(dkg) < 5.e-4)
    t_dkg = 1.;
  if (fabs(dg1) < 5.e-4)
    t_dg1 = 1.;

  return t_lZ*t_dkg*t_dg1;
}

Double_t RooDibosonHistPdf::evaluate() const 
{ 
  // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 

  double ret = dhist->weight(x.arg(), 0, false);
  if (ret < 0)
    ret = 0.;
  
  ret *= anomalousRatio();
  return ret; 
}

Bool_t RooDibosonHistPdf::importWorkspaceHook(RooWorkspace& ws) 
{  
  // Check if our datahist is already in the workspace
  std::list<RooAbsData*> allData = ws.allData() ;
  std::list<RooAbsData*>::const_iterator iter ;
  for (iter = allData.begin() ; iter != allData.end() ; ++iter) {
    // If your dataset is already in this workspace nothing needs to be done
    if (*iter == dhist) {
      return kFALSE ;
    }
  }

  // Check if dataset with given name already exists
  RooAbsData* wsdata = ws.data(dhist->GetName()) ;
  if (wsdata) {
    if (wsdata->InheritsFrom(RooDataHist::Class())) {
      // Exists and is of correct type -- adjust internal pointer
      dhist = (RooDataHist *) wsdata ;
      return kFALSE ;
    } else {
      // Exists and is NOT of correct type -- abort
      
    }
  }

  // We need to import our datahist into the workspace
  Bool_t flag = ws.import(*dhist) ;
  if (flag) {
    coutE(ObjectHandling) << "RooHistPdf::importWorkspaceHook(" << GetName() 
			  << ") error importing RooDataHist into workspace: dataset of different type with same name already exists." << endl ;
    return kTRUE ;
  }

  // Redirect our internal pointer to the copy in the workspace
  dhist = (RooDataHist *) ws.data(dhist->GetName());
  return kFALSE ;
}
